package com.seating.controller;


import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.opencsv.CSVReader;
import com.seating.model.Admin;
import com.seating.model.TimeTableForm;
import com.seating.model.Time_Table;
import com.seating.repo.AdminRepo;
import com.seating.repo.Time_TableRepository;




@Controller
public class HomeController {
	private final Time_TableRepository timeTableRepository;

	@Autowired
	AdminRepo adminRepo;
	
    @Autowired	
    public HomeController(Time_TableRepository timeTableRepository) {
        this.timeTableRepository = timeTableRepository;
    }
	@GetMapping("/")
	public String home() {
		
		return "login";
	}
	
	
	@PostMapping("/login")
	public String authenticateUser(Model model, String userid, String password) {
	    Admin user = adminRepo.findByUserid(userid);
	   
	    if (user != null && user.getPassword().equals(password)) 
	    {
	        if (user.getRole().equals("ROLE_ADMIN")) {
	            return "home1";
	        } else {
	            return "home";
	        }
	    } else 
	    {
	        model.addAttribute("error", "Authentication failed");
	        return "login";
	    }
	}

    @GetMapping("/back")
	public String back() {
    	return "home";
    }
	
	@GetMapping("/time-table")
	public String timetable(Model model) {
		List<Time_Table> examDetailsList = new ArrayList<Time_Table>(); 
	    model.addAttribute("examDetails", examDetailsList);
		return "timetable";
	}
	
	
	@PostMapping("/submit")
	public String submitForm(@ModelAttribute("examDetails") TimeTableForm timeTableForm,
	                         @RequestParam("branch") String branch,
	                         @RequestParam("sem") String semester) {

	    List<Time_Table> examDetails = timeTableForm.getExamDetails();

	    for (Time_Table exam : examDetails) {
	        exam.setBranch(branch);
	        exam.setSemester(semester);
	        timeTableRepository.save(exam);
	    }

	    return "timetable";
	}
	@PostMapping("/uploadttCSV")
	public String uploadCSVFile(@RequestParam("csvFile") MultipartFile file) {
	    // Check if the file is empty
	    if (file.isEmpty()) {
	        return "/";
	    }

	    try {
	        // Create a CSVReader to read the uploaded CSV file
	        CSVReader reader = new CSVReader(new InputStreamReader(file.getInputStream()));

	        String[] nextLine;
	        int lineNumber = 0;
	        long id=1;
	        // Iterate through each line in the CSV file
	        while ((nextLine = reader.readNext()) != null) {
	            lineNumber++;
	            
	            // Assuming your CSV has columns in the following order: branch, semester, date, time, subject
	            if (nextLine.length != 5) {
	                return "/";
	            }

	            String branch = nextLine[0].trim();
	            String semester = nextLine[1].trim();
	            String dateStr = nextLine[2].trim();
	            String time = nextLine[3].trim();
	            String subject = nextLine[4].trim();

	            // Convert dateStr to a java.sql.Date object
	            java.sql.Date date = java.sql.Date.valueOf(dateStr);
	            id++;
	            // Create a Time_Table object and save it to the database
	            Time_Table timetable = new Time_Table(id,branch, semester, date, time, subject);
	            // You don't need to set the id explicitly; it will be generated by the database.
	            timeTableRepository.save(timetable);
	        }

	        // Close the CSVReader
	        reader.close();

	        
	        return "redirect:/timetable"; 
	    } catch (Exception e) {
	        
	        return "/";
	    }
	}

	@GetMapping("/download/pdf")
    public ResponseEntity<byte[]> downloadPdf() throws IOException {
        
        ClassPathResource pdfFile = new ClassPathResource("static/super.pdf");

        
        byte[] pdfBytes = Files.readAllBytes(pdfFile.getFile().toPath());

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_PDF);
        headers.setContentDispositionFormData("attachment", "supervisor_allotment.pdf");
        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");

        return ResponseEntity.ok()
            .headers(headers)
            .body(pdfBytes);
    }



	
}
